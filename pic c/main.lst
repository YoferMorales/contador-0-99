CCS PCM C Compiler, Version 5.112, 5967               17-may.-24 13:26

               Filename:   C:\Users\User\Desktop\escritorio\programacion V0.0.1\ejercicios del libro compilador C Ccs y simulacion en proteus\contador 0-99\main.lst

               ROM used:   73 words (1%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           9 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   01A
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
0004:  MOVLW  23
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   039 (RETURN)
.................... 
.................... 
.................... int seg1=0, seg2=0;
.................... 
.................... void main()
001A:  MOVF   03,W
001B:  ANDLW  1F
001C:  MOVWF  03
001D:  CLRF   20
001E:  CLRF   21
001F:  MOVLW  FF
0020:  MOVWF  22
0021:  BSF    03.5
0022:  BSF    1F.0
0023:  BSF    1F.1
0024:  BSF    1F.2
0025:  BCF    1F.3
0026:  MOVLW  07
0027:  MOVWF  1C
0028:  BCF    03.7
.................... {
....................    while(true)
....................    {
....................       output_C(seg1);
0029:  MOVLW  00
002A:  BCF    03.5
002B:  MOVWF  22
002C:  BSF    03.5
002D:  CLRF   07
002E:  BCF    03.5
002F:  MOVF   20,W
0030:  MOVWF  07
....................       output_B(seg2);
0031:  BSF    03.5
0032:  CLRF   06
0033:  BCF    03.5
0034:  MOVF   21,W
0035:  MOVWF  06
....................       delay_ms(200);
0036:  MOVLW  C8
0037:  MOVWF  23
0038:  GOTO   004
....................       seg1=seg1+1;
0039:  MOVLW  01
003A:  ADDWF  20,F
....................       if (seg1>=10)
003B:  MOVF   20,W
003C:  SUBLW  09
003D:  BTFSC  03.0
003E:  GOTO   042
....................       {
....................          seg1=0;
003F:  CLRF   20
....................          seg2=seg2+1;
0040:  MOVLW  01
0041:  ADDWF  21,F
....................       }
....................       if (seg2>=10)
0042:  MOVF   21,W
0043:  SUBLW  09
0044:  BTFSS  03.0
....................       {
....................          seg2=0;
0045:  CLRF   21
....................       }
0046:  BSF    03.5
0047:  GOTO   029
....................    }
.................... }
0048:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
